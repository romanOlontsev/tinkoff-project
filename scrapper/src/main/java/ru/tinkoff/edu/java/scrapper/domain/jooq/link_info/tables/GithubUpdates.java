/*
 * This file is generated by jOOQ.
 */
package ru.tinkoff.edu.java.scrapper.domain.jooq.link_info.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.tinkoff.edu.java.scrapper.domain.jooq.link_info.Keys;
import ru.tinkoff.edu.java.scrapper.domain.jooq.link_info.LinkInfo;
import ru.tinkoff.edu.java.scrapper.domain.jooq.link_info.tables.records.GithubUpdatesRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GithubUpdates extends TableImpl<GithubUpdatesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>LINK_INFO.GITHUB_UPDATES</code>
     */
    public static final GithubUpdates GITHUB_UPDATES = new GithubUpdates();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<GithubUpdatesRecord> getRecordType() {
        return GithubUpdatesRecord.class;
    }

    /**
     * The column <code>LINK_INFO.GITHUB_UPDATES.ID</code>.
     */
    public final TableField<GithubUpdatesRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>LINK_INFO.GITHUB_UPDATES.FORKS_COUNT</code>.
     */
    public final TableField<GithubUpdatesRecord, Integer> FORKS_COUNT = createField(DSL.name("FORKS_COUNT"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>LINK_INFO.GITHUB_UPDATES.WATCHERS</code>.
     */
    public final TableField<GithubUpdatesRecord, Integer> WATCHERS = createField(DSL.name("WATCHERS"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    private GithubUpdates(Name alias, Table<GithubUpdatesRecord> aliased) {
        this(alias, aliased, null);
    }

    private GithubUpdates(Name alias, Table<GithubUpdatesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>LINK_INFO.GITHUB_UPDATES</code> table reference
     */
    public GithubUpdates(String alias) {
        this(DSL.name(alias), GITHUB_UPDATES);
    }

    /**
     * Create an aliased <code>LINK_INFO.GITHUB_UPDATES</code> table reference
     */
    public GithubUpdates(Name alias) {
        this(alias, GITHUB_UPDATES);
    }

    /**
     * Create a <code>LINK_INFO.GITHUB_UPDATES</code> table reference
     */
    public GithubUpdates() {
        this(DSL.name("GITHUB_UPDATES"), null);
    }

    public <O extends Record> GithubUpdates(Table<O> child, ForeignKey<O, GithubUpdatesRecord> key) {
        super(child, key, GITHUB_UPDATES);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : LinkInfo.LINK_INFO;
    }

    @Override
    @NotNull
    public UniqueKey<GithubUpdatesRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_D;
    }

    @Override
    @NotNull
    public List<ForeignKey<GithubUpdatesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CONSTRAINT_DE);
    }

    private transient Link _link;

    /**
     * Get the implicit join path to the <code>LINK_INFO.LINK</code> table.
     */
    public Link link() {
        if (_link == null)
            _link = new Link(this, Keys.CONSTRAINT_DE);

        return _link;
    }

    @Override
    @NotNull
    public GithubUpdates as(String alias) {
        return new GithubUpdates(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public GithubUpdates as(Name alias) {
        return new GithubUpdates(alias, this);
    }

    @Override
    @NotNull
    public GithubUpdates as(Table<?> alias) {
        return new GithubUpdates(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public GithubUpdates rename(String name) {
        return new GithubUpdates(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public GithubUpdates rename(Name name) {
        return new GithubUpdates(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public GithubUpdates rename(Table<?> name) {
        return new GithubUpdates(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row3<Long, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Long, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Long, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
